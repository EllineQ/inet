[General]
network = TsnNetworkExample

# all clocks have a random constant drift
*.*.clock.oscillator.driftRate = uniform(-100ppm, 100ppm)

# source TSN end device with one 802.2 LLC source application producing 800kbps (100B/1ms)
*.source.numApps = 1
*.source.app[0].typename = "Ieee8022LlcApp"
*.source.app[0].source.packetLength = 100B
*.source.app[0].source.productionInterval = 1ms
*.source.app[0].io.interface = "eth0"
*.source.app[0].io.remoteAddress = "destination"
*.source.app[0].io.remoteSap = 0

# destination TSN end device with one 802.2 LLC sink application
*.destination.numApps = 1
*.destination.app[0].typename = "Ieee8022LlcSink"
*.destination.app[0].io.localSap = 0

# datarate of all ethernet interfaces
*.*.eth[*].bitrate = 100Mbps

# gPTP master ports
*.switch1.gptp.masterPorts = ["eth1", "eth2"]
*.switch2.gptp.masterPorts = ["eth1"]
*.switch3.gptp.masterPorts = ["eth1"]

# queueing in TSN ethernet switches
*.*.eth[*].macLayer.queue.numQueues = 2
*.*.eth[*].macLayer.queue.classifier.typename = "PcpClassifier"
*.*.eth[*].macLayer.queue.gate[1].typename = ""

# ingress filtering in TSN ethernet switches
*.*.bridging.streamFilter.ingress.numStreams = 1
*.*.bridging.streamFilter.ingress.classifier.mapping = {s1: 0}
*.*.bridging.streamFilter.ingress.meter[0].committedInformationRate = 800kbps
*.*.bridging.streamFilter.ingress.meter[0].excessInformationRate = 100kbps
*.*.bridging.streamFilter.ingress.meter[0].committedBurstSize = 800kB
*.*.bridging.streamFilter.ingress.meter[0].excessBurstSize = 100kB

# gate scheduling configurator for time aware shaping
*.gateSchedulingConfigurator.gateCycleDuration = 1ms
*.gateSchedulingConfigurator.typename = "SimpleGateSchedulingConfigurator"

# TSN configurator for automatic configuration of both stream redundancy and gate scheduling
# single link failure protection redundancy for CDT traffic
# 64B = 8B (UDP) + 20B (IP) + 4B (802.1R) + 6B (802.1Q) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.tsnConfigurator.configuration = [{name: "s1", application: "app[0]",
                                    source: "source", destination: "destination",
                                    priority: 0, packetDataFilter: "inet::Ieee8022LlcHeader and remoteSap =~ 0",
                                    packetLength: 100B + 64B, packetInterval: 1ms, maxLatency: 100us,
                                    linkFailureProtection: [{any: 1, of: "*->* and not source->switch1"}]}]
# visualization
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"

# TSN configuration visualizer displays the selected alternative paths with different-colored dashed poly-arrows 
*.visualizer.tsnConfigurationVisualizer[0].displayTrees = true
*.visualizer.tsnConfigurationVisualizer[0].lineStyle = "dashed"

# stream redundancy configuration visualizer displays the selected ethernet links between the TSN network nodes for the above alternative paths with green polyarrows
*.visualizer.streamRedundancyConfigurationVisualizer[0].displayTrees = true
*.visualizer.streamRedundancyConfigurationVisualizer[0].lineColor = "green4"

# gate scheduling visualizer displays the periodic gate scheduling for time-aware shaping along the time axis using red and green areas (open and closed states)
*.visualizer.gateVisualizer[0].displayGates = true
*.visualizer.gateVisualizer[0].displayDuration = 100us
*.visualizer.gateVisualizer[0].gateFilter = "*.source.eth[0].**.gate[0] or *.switch1.eth[2].**.gate[0] or *.switch1.eth[3].**.gate[0] or *.switch2.eth[1].**.gate[0] or *.switch3.eth[1].**.gate[0]"
*.visualizer.gateVisualizer[0].height = 16

# data link visualizer displays TSN application activity and gPTP synchronization activity
*.visualizer.numDataLinkVisualizers = 2
*.visualizer.dataLinkVisualizer[*].displayLinks = true
*.visualizer.dataLinkVisualizer[*].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "source*"
*.visualizer.dataLinkVisualizer[1].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"
*.visualizer.dataLinkVisualizer[1].lineColor = "red2"
